// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// <-- NOVO: Definimos as funções possíveis no sistema.
enum Role {
  ADMIN
  BARBEIRO
}

// <-- NOVO: Modelo central para todos os utilizadores que podem fazer login no sistema de gestão.
model UsuarioSistema {
  id          String    @id @default(uuid())
  nome        String
  email       String    @unique
  senha       String
  fotoPerfil  String?
  role        Role      // A função do utilizador: ADMIN ou BARBEIRO.
  barbeariaId String

  barbearia   Barbearia @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
  
  // Relacionamento opcional com o perfil de Barbeiro.
  // Um admin não terá este perfil, mas um utilizador com role BARBEIRO terá.
  barbeiroProfile Barbeiro?
}

model Barbearia {
  id        String    @id @default(uuid())
  nome      String    @unique
  // <-- ALTERADO: Email e Senha foram movidos para o modelo UsuarioSistema.
  endereco  String?
  celular   String?
  telefone  String?
  fotoPerfil String? // Opcional: pode manter aqui ou usar o do UsuarioSistema
  descricao String?
  latitude  Float
  longitude Float
  status    String    @default("Ativa")

  // --- CAMPOS PARA ASSINATURA STRIPE ---
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  // <-- ALTERADO: A barbearia agora se relaciona com os seus utilizadores do sistema.
  usuariosSistema      UsuarioSistema[]

  barbeiros             Barbeiro[]
  servicos              Servico[]
  produtos              Produto[]
  agendamentos          Agendamento[]
  avaliacoes            Avaliacao[]
  horariosFuncionamento HorariosFuncionamentoBarbearia[]
  FormaPagamento        FormaPagamento[]
  RedeSocial            RedeSocial[]
}

model Barbeiro {
  id          String  @id @default(uuid())
  barbeariaId String
  nome        String
  // <-- ALTERADO: Email e Senha foram movidos para o modelo UsuarioSistema.
  telefone    String
  fotoPerfil  String?

  // <-- NOVO: Adicionamos um relacionamento 1-para-1 com a conta de login do barbeiro.
  usuarioSistemaId String         @unique
  usuarioSistema   UsuarioSistema @relation(fields: [usuarioSistemaId], references: [id], onDelete: Cascade)

  barbearia    Barbearia       @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
  horarios     HorarioTrabalho[]
  agendamentos Agendamento[]
}

// NENHUMA ALTERAÇÃO NECESSÁRIA NOS MODELOS ABAIXO PARA ESTA FUNCIONALIDADE
// Eles permanecem exatamente como estão.

model HorariosFuncionamentoBarbearia {
  id          String   @id @default(uuid())
  barbeariaId String
  diaSemana   Int
  horaInicio  String
  horaFim     String
  barbearia   Barbearia @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
}

model FormaPagamento {
  id          String   @id @default(uuid())
  barbeariaId String
  tipo        String
  barbearia   Barbearia @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
}

model RedeSocial {
  id          String   @id @default(uuid())
  barbeariaId String
  link        String
  rede        String
  barbearia   Barbearia @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
}

model HorarioTrabalho {
  id         String   @id @default(uuid())
  barbeiroId String
  diaSemana  Int
  hora       String
  barbeiro   Barbeiro @relation(fields: [barbeiroId], references: [id], onDelete: Cascade)
}

model Servico {
  id          String      @id @default(uuid())
  barbeariaId String
  nome        String
  duracao     Int
  preco       Decimal?
  barbearia   Barbearia   @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
  agendamentos Agendamento[]
}

model Produto {
  id          String   @id @default(uuid())
  barbeariaId String
  nome        String
  descricao   String?
  preco       Decimal
  tipo        String
  imagemUrl   String?
  estoque     Boolean
  barbearia   Barbearia @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
}

model Agendamento {
  id          String @id @default(uuid())
  usuarioId   String
  barbeariaId String
  barbeiroId  String
  servicoId   String
  data        String
  hora        String
  status      String @default("Confirmado")

  usuario   Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  barbearia  Barbearia @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
  barbeiro    Barbeiro  @relation(fields: [barbeiroId], references: [id], onDelete: Cascade)
  servico     Servico   @relation(fields: [servicoId], references: [id], onDelete: Cascade)
}

model Avaliacao {
  id          String   @id @default(uuid())
  usuarioId   String
  barbeariaId String
  nota        Int
  comentario  String?
  dataHora    DateTime @default(now())

  usuario   Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  barbearia  Barbearia @relation(fields: [barbeariaId], references: [id], onDelete: Cascade)
}

// Este modelo é para os clientes finais da barbearia, não para os gestores.
// Está correto e não precisa de alterações.
model Usuario {
  id           String        @id @default(uuid())
  nome         String
  email        String        @unique
  senha        String
  telefone     String?
  fotoPerfil   String?
  agendamentos Agendamento[]
  avaliacoes   Avaliacao[]
}